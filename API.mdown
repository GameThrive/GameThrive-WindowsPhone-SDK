# GameThrive Windows Phone SDK API


List of Methods
----------
- [`Init`](#Init)
- [`SendTag`](#sendTag)
- [`SendTags`](#sendTags)
- [`GetTags`](#getTags)
- [`DeleteTag`](#deleteTag)
- [`DeleteTags`](#deleteTags)
- [`SendPurchase`](#sendPurchase)
- [`GetIdsAvailable`](#idsAvailable)

List of Delegates
-----
- [`NotificationReceived`](#NotificationReceived)
- [`IdsAvailableHandler`](#IdsAvailableHandler)
- [`TagsReceived`](#TagsReceived)


## Methods
<a name="Init" />
#### Init
Only required method you call to setup GameThrive to recieve push notifications. Must be called from OnNavigatedTo and on any page your app can start from. For most basic games/apps you will just add it to MainPage.xaml.cs.

- ##### Parameters
 - __`string` _appId___ - Your GameThrive app id from gamethrive.com
 - __`NotificationReceived` _inNotificationDelegate(Optional)___ - Calls this delegate when a notification is opened or one is received when the user is in your game.

 
- __Example__

	````CSharp
	protected override void OnNavigatedTo(NavigationEventArgs navEventArgs) {
            base.OnNavigatedTo(navEventArgs);
            GameThrive.Init("5eb5a37e-b458-11e3-ac11-000c2940e62c", ReceivedNotification);
        }
	````

<a name="sendTag" />
#### SendTag
Tag a player based on a game event of your choosing so later you can create segments on [gamethrive.com](https://gamethrive.com) to target these players. Using SendTags instead if you need to set more than one tag on a player at a time.

- ##### Parameters
 - __`string` _key___ - Key of your choosing to create or update.
   - _NOTE:_ Passing in a blank string deletes the key, you can also call DeleteTag.
 - __`string` _value___ - Value to set on the key.

 
- __Example__

	````CSharp
	GameThrive.SendTag("key", "value");
	````
	
<a name="sendTags" />
#### SendTags
Tag a player based on a game event of your choosing so later you can create segments on [gamethrive.com](https://gamethrive.com) to target these players.

- ##### Parameters
 - __`IDictionary<string, string>` OR `IDictionary<string, int>` OR `IDictionary<string, object>`  _keyValuePairs___ - Keys and values of your choosing to create or update.
   - _NOTE:_ Passing in a blank string deletes the key, you can also call DeleteTag or DeleteTags.

 
- __Example__

	````CSharp
	GameThrive.SendTags(new Dictionary<string, string>() {
                {"Key1", "Value1"},
                {"Key2", "Value2"}
            });
	````

<a name="getTags" />
#### GetTags
Retrieve a list of tags that have been set on the player from the GameThrive server.

- ##### Parameters
 - __`TagsReceived` _inTagsReceivedDelegate(Optional)___ - Delegate gets called once the tags are available. If you need more than one method subscribed to the event add to GameTrhive.tagsReceivedDelegate and leave the parameter to this method blank. The passed in delegate removes all other delegates.

 
- __Example__

	````CSharp
	void SomeMethod() {
		GameThrive.GetTags(TagsReceived);
	}

	private void TagsReceived(IDictionary<string, string> tags) {
		foreach (var tag in tags)
			System.Diagnostics.Debug.WriteLine(tag.Key + ":" + tag.Value);
	}
	````

<a name="deleteTag" />
#### DeleteTag
Deletes a tag that was previously set on a player with `sendTag`. Use DeleteTags if you need to delete more than one.

- ##### Parameters
 - __`string` _key___ - Key to remove.
   
 
- __Example__

	````CSharp
	GameThrive.DeleteTag("key");
	````

<a name="deleteTags" />
#### DeleteTags
Deletes a tag that was previously set on a player with `SendTag` or `SendTags`.

- ##### Parameters
 - __`IList<string> tags` _keys___ - Keys to remove.
   
 
- __Example__

	````CSharp
	GameThrive.DeleteTags(new List<string>(){"Key1", "Key2"});
	````

<a name="sendPurchase" />
#### SendPurchase
Call this method when a user completes an in-app purchase, and provide the amount spent in USD. This can later be used to target free vs paid users when sending a push notification.

- ##### Parameters
 - __`double` OR `decimal` _amount___ - Amount spent in USD.
   
- __Example__

	````CSharp
	GameThrive.SendPurchase(1.23d);
	````



<a name="idsAvailable" />
#### GetIdsAvailable
Lets you retrieve the GameThrive player id and push token. Your delegate is called after the device is successfully registered with GameThrive. If the device has already successfully registered, the delegate will be called immediately.

- ##### Parameters
 - __`IdsAvailable`  _inIdsAvailableDelegate___ -  Calls the delegate when the player id is available. If you need more than one method subscribed to the event add to GameTrhive.idsAvailableDelegate and leave the parameter to this method blank. The passed in delegate removes all other delegates.

- __Example__

	````CSharp
	void SomeMethod() {
		GameThrive.GetIdsAvailable(IdsAvailable);
	}

	private void IdsAvailable(string playerID, string pushToken) {
		System.Diagnostics.Debug.WriteLine("PlayerID:"  + playerID);
		System.Diagnostics.Debug.WriteLine("pushToken:" + pushToken);
	}
	````

## Delegates

<a name="NotificationReceived" />
#### NotificationReceived
Delegate you can define to process information on the notification the user just opened.

- __Parameters__
     - __`IDictionary<string, string>` _additionalData___ - Key value pairs that were set on the notification.
     - __`boolean` _isActive___ - True if your app was currently being used when a notification came in.
   
 
- __Example__

	````CSharp
	private static void ReceivedNotification((IDictionary<string, string> additionalData, bool isActive) {
		// When isActive is true this means the player is currently in your game.
		// Use isActive and your own game logic so you don't interupt the player with a popup or menu when they are in the middle of playing your game.
		if (additionalData != null) {
			if (additionalData.ContainsKey("discount")) {
				extraMessage = "DISCOUNT!";
				// Take player to your store.
			}
			else if (additionalData.ContainsKey("bonusCredits")) {
				extraMessage = "BONUS CREDITS!";
				// Take player to your store.
			}
		}
	}
	````

<a name="IdsAvailable" />
#### IdsAvailable
Delegate you can define to get the GameThrive playerId and Google registration Id or an iOS push token.

   - __Parameters__
     - __`string` _playerId___ - GameThrive playerId is a UUID formatted string.(_unique per device per app_)
     - __`string` _pushToken___ - Microsoft Channel Uri(_unique per device per app_).
      - _NOTE:_ Might be blank if there was a connection issue with Microsoft.
 
- __Example__

	````CSharp
	private void IdsAvailable(string playerID, string pushToken) {
		System.Diagnostics.Debug.WriteLine("PlayerID:"  + playerID);
		System.Diagnostics.Debug.WriteLine("pushToken:" + pushToken);
	}
	````

<a name="TagsReceived" />
#### TagsReceived
Delegate you can define to get the all the tags set on a player from gamethrive.com.

   - __Parameters__
     - __`IDictionary<string, string>` _tags___ - Dictionary of key value pairs retrieved from the GameThrive server.
   
 
- __Example__

	````CSharp
	private static void TagsReceived(Dictionary<string, object> tags) {
		foreach (var tag in tags)
			System.Diagnostics.Debug.WriteLine(tag.Key + ":" + tag.Value);
	}
	````
